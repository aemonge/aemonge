[diff]
  tool = vim -d

[merge]
  tool = vimd -d

; [core]
;   editor = "nvr --remote-tab-wait"

[fetch]
  prune = true
  all = true

[pull]
  rebase = false
  autoSetupRemote = true

[user]
  email = andres@aemonge.com
  name = aemonge

[push]
  autoSetupRemote = true

[alias]
  st            = status
  ch            = checkout
  cm            = commit -m
  ca            = commit --amend --no-edit
  assume        = update-index --assume-unchanged
  unassume      = update-index --no-assume-unchanged
  fpush         = push --force-with-lease

# One liner functions
  assumed       = "!git ls-files -v | grep ^h | cut -c 3-"
  ours          = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs        = "!f() { git checkout --theirs $@ && git add $@; }; f"
  clean-merged  = "!git branch --merged | egrep -v '(^\\*|mast|dev|stag|prod|release)' | (xargs git branch -d 2> /dev/null || echo no merged branches found)"
  remove-tags   = "!git tag | xargs git tag -d"
  remove-tags-remote  = "!git tag -l | xargs -n 1 git push --delete origin"
  clean-ignored =  "!f() { for dir in $(git ls-files -i --exclude-from=.gitignore $@); do git rm -r --cached $dir; done; }; f"

# Not Aliases but useful functions
# NOTE: [For example '!f() { : git commit ; ... }; f' will tell the completion to use commit completion.]
# SEE: [source](https://github.com/git/git/blob/23b219f8e3f2adfb0441e135f0a880e6124f766c/contrib/completion/git-completion.bash#L26-L30)
  # Move between branches as a directory pushd popd, etc...
  bstack = "!f() { : git checkout ; \
    _REPO=$(basename `git rev-parse --show-toplevel`) ;\
    case $1 in \
    'push' ) \
      : git checkout ; \
      _BRANCH=$(git symbolic-ref head); \
      _BRANCH=${_BRANCH#'refs/heads/'}; \
      echo $_BRANCH >> /tmp/gitStack-$_REPO; \
      git checkout ${@:2}; \
      ;; \
    'pop' ) \
      : git checkout ; \
      if [[ -e /tmp/gitStack-$_REPO ]]; then \
        _REPO=$(basename `git rev-parse --show-toplevel`) ;\
        _BRANCH=$(tail -1 /tmp/gitStack-$_REPO); \
        git checkout ${_BRANCH%*:}; \
        head -n+1 /tmp/gitStack-$_REPO > /tmp/_gitStack; \
        mv /tmp/_gitStack /tmp/gitStack-$_REPO; \
        [[ $(wc -l /tmp/gitStack-$_REPO | awk '{print $1}') == 1 ]] && rm /tmp/gitStack-$_REPO; \
      else \
        echo 'Branch stack is empty'; \
      fi; \
      ;; \
    'clear' ) \
      rm /tmp/gitStack-$_REPO; \
      ;; \
    'list' ) \
      cat /tmp/gitStack-$_REPO 2> /dev/null; \
      ;; \
    'simple' ) \
      echo '$> git checkout - # Only a go back, not a full stack'; \
      git checkout -; \
      ;; \
    '' ) \
      echo '  Usage: git bstack [push|pop|clear|list|simpel] <branch>'; \
      ;; \
    esac \
  }; f"
  ; __git_complete bstack git_checkout

  # Get the last files, either on the staged or in a log. Meant to use for concatenation and pipe purposes
  get-files     = "!f() { : git log ; \
    if [[ ! -n $1 ]]; then \
      git status -s | awk '{print $2}'; \
    else \
      if [[ \"$2\" = \"--full\" ]]; then \
        echo \"$> git log -\"$1\" --name-only [--pretty='format:']\"; \
        git log \"$1\" --name-only; \
      else \
        git log \"$1\" --name-only --pretty='format:'; \
      fi; \
    fi; \
  }; f"
  get-files-staged  = "!f() { git status -s | awk '{print $2}'; }; f"
  ; unstage-files = "!f() { git reset HEAD $@; git restore $@ 2> /dev/null; }; f"

; git checkout $@;
; How to use REBASE ?
; git rebase -i HEAD~11
; A="01-16-2023 21:17:11 +0100"; LC_ALL=C GIT_COMMITTER_DATE=$A git ca --date $A
; Don't make me the author on rebase, keep the blame on them bro ðŸ¤™ `git -c rebase.instructionFormat='%s%nexec GIT_COMMITTER_DATE="%cD" git commit --amend --no-edit' rebase -i`
[init]
    defaultBranch = main
