#!/bin/bash

VERSION="0.0.1"

USERNAME="aemonge"
USER_HOME="/home/$USERNAME"
MOUNT_POINT="/home/$USERNAME/.mounts/cloud"
SECRETS_MOUNT="$USER_HOME/secrets"
TEMP_SECRETS="/tmp/secrets"

# Define directories to sync
declare -A CLOUD_DIRS=(
    ["/os"]="$USER_HOME/os"
    ["/settings"]="$USER_HOME/settings"
    ["/media/images"]="$USER_HOME/images"
    ["/media/videos"]="$USER_HOME/videos"
    ["/media/music"]="$USER_HOME/music"
    ["/documents/dev"]="$USER_HOME/documents"
    ["/public"]="$USER_HOME/public"
    ["/stash"]="$USER_HOME/stash"
    ["/documents/studies/UNED"]="$USER_HOME/studies"
)

# Array to store PIDs of background processes
PIDS=()

function show_help() {
    echo "pcloud - A unified pCloud management script"
    echo ""
    echo "This script provides various operations for managing pCloud, including"
    echo "pulling, pushing, syncing, mounting the pCloud directory, and managing secrets."
    echo ""
    echo "Usage: pcloud [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  pull    Pull data from pCloud to local directories"
    echo "  push    Push data from local directories to pCloud"
    echo "  sync    Perform a bi-directional sync between pCloud and local directories"
    echo "  mount   Mount the pCloud directory"
    echo "  umount  Unmount the pCloud directory"
    echo "  secret [timeout]  Mount secrets directory and unmount after timeout (default: 5 minutes)"
    echo "  -h, --help    Show this help message and exit"
    echo "  -v, --version Show version information and exit"
    echo ""
    echo "For more information, please refer to the script documentation."
}

function show_version() {
    echo "pcloud version $VERSION"
}

function cleanup() {
    # Kill all background processes
    for pid in "${PIDS[@]}"; do
        kill "$pid" 2>/dev/null
    done
    wait 2>/dev/null
    echo "Cleanup completed."
}

function mount_pcloud() {
    echo "Mounting pCloud directory"
    mkdir -p $MOUNT_POINT
    rclone mount pcloud:/ $MOUNT_POINT --daemon --vfs-cache-mode full
    xdg-open "$MOUNT_POINT"
}

function unmount_pcloud() {
    echo "Un-mounting pCloud directory"
    fusermount -u "$MOUNT_POINT" || umount "$MOUNT_POINT"
    rmdir $MOUNT_POINT
}

function sync_operation() {
    local operation=$1
    local max_length=0

    # First pass to determine max length
    for REMOTE_DIR in "${!CLOUD_DIRS[@]}"; do
        LOCAL_DIR=${CLOUD_DIRS[$REMOTE_DIR]}
        if [ "$operation" = "pull" ]; then
            current_length=$((${#REMOTE_DIR} + 15))  # 13 for "Pulling: pcloud:"
        else
            current_length=$((${#LOCAL_DIR} + 11))  # 9 for "Pushing: "
        fi
        if [ $current_length -gt $max_length ]; then
            max_length=$current_length
        fi
    done

    # Add a small buffer to max_length
    max_length=$((max_length + 2))

    # Second pass to perform sync and print aligned output
    for REMOTE_DIR in "${!CLOUD_DIRS[@]}"; do
        LOCAL_DIR=${CLOUD_DIRS[$REMOTE_DIR]}
        if [ "$operation" = "pull" ]; then
            printf "%-*s ➡️  %s\n" $max_length "Pulling: pcloud:$REMOTE_DIR" "$LOCAL_DIR"
            rclone sync -q --check-first "pcloud:$REMOTE_DIR" "$LOCAL_DIR" &
        elif [ "$operation" = "push" ]; then
            printf "%-*s ➡️  %s\n" $max_length "Pushing: $LOCAL_DIR" "pcloud:$REMOTE_DIR"
            rclone sync -q --check-first "$LOCAL_DIR" "pcloud:$REMOTE_DIR" &
        fi
        PIDS+=($!)
    done

    wait
}

function root_sync() {
    echo "Syncing os directory..."

    function perform_sync() {
        USERNAME="aemonge"
        USER_HOME="/home/$USERNAME"
        LOCAL_SYS_DIR="$USER_HOME/os/"

        # Ensure running as root
        if [[ $(id -u) -ne 0 ]]; then
            echo "This script must be run as root"
            return 1
        fi

        # 1. List all files under LOCAL_SYS_DIR
        find "$LOCAL_SYS_DIR" -type f | while read -r local_file; do
            # Extract the path after the LOCAL_SYS_DIR
            relative_path="${local_file#$LOCAL_SYS_DIR}"
            # Determine the corresponding system file path
            system_file="/$relative_path"

            # Check if the system file exists
            if [[ -f $system_file ]]; then
                # Compare file modification times
                local_mtime=$(stat -c %Y "$local_file")
                system_mtime=$(stat -c %Y "$system_file")

                if [[ $local_mtime -gt $system_mtime ]]; then
                    RECENT="$local_file"
                    OLDER="$system_file"
                else
                    RECENT="$system_file"
                    OLDER="$local_file"
                fi

                # Perform the rsync from $RECENT to $OLDER to update the older based on the most recent
                # BUG: Unsure about this --no-o --no-g --no-p \
                /usr/bin/rsync -a --delete --exclude 'lost+found' \
                    --no-o --no-g --no-p \
                    "$RECENT" "$(dirname "$OLDER")"
            else
                # The system file does not exist, so create it with root permissions
                echo "System file $system_file does not exist. Creating it."
                # Ensure the directory exists
                mkdir -p "$(dirname "$system_file")"
                # Copy the file
                cp "$local_file" "$system_file"
                # Optionally, set permissions explicitly. Since the script runs as root, files will be owned by root by default.
                # chown root:root "$system_file"
                # chmod <desired-permissions> "$system_file"
            fi
        done

        # BUG: Sometimes the owner of the system file is not the same as the owner of the local file.
        find $USER_HOME -user root -exec chown $USERNAME:$USERNAME {} \;
    }

    # Export the function so it's available to sudo
    export -f perform_sync

    # Call the function with sudo
    sudo bash -c "$(declare -f perform_sync); perform_sync" || exit 1

    # Unset the function after use
    unset -f perform_sync
}

function start_crypto() {
    local password="$1"
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"startcrypto $password\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

function stop_crypto() {
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"stopcrypto\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

function mount_secrets() {
    local timeout=${1:-300}  # Default timeout: 5 minutes (300 seconds)

    # Check if ~/secrets is not empty
    if [ "$(ls -A $SECRETS_MOUNT)" ]; then
        echo "Moving existing content from $SECRETS_MOUNT to $TEMP_SECRETS"
        mkdir -p $TEMP_SECRETS
        mv $SECRETS_MOUNT/* $TEMP_SECRETS/
    fi

    # Fetch the password from KWallet
    local password=$(kwallet-query -f "Secret Service" -r "pcloud" "kdewallet")

    # Mount secrets
    echo "Mounting secrets directory"
    start_crypto "$password"

    # Try to add content from /tmp/secrets to ~/secrets
    if [ -d "$TEMP_SECRETS" ] && [ "$(ls -A $TEMP_SECRETS)" ]; then
        echo "Syncing content from $TEMP_SECRETS to $SECRETS_MOUNT"
        rsync -av $TEMP_SECRETS/ $SECRETS_MOUNT/
        rm -rf $TEMP_SECRETS
    fi

    echo "Secrets mounted. Will automatically unmount in $timeout seconds."
    xdg-open ~/secrets

    # Set up unmount after timeout
    (
        sleep $timeout
        unmount_secrets
    ) &
}

function unmount_secrets() {
    echo "Unmounting secrets directory"
    stop_crypto
    echo "Secrets unmounted"
}


trap cleanup INT TERM EXIT

case "$1" in
    pull)
        sync_operation "pull"
        root_sync
        ;;
    push)
        root_sync
        sync_operation "push"
        ;;
    sync)
        echo "'bisync' operation is in beta. Please use 'pull' or 'push' instead."
        ;;
    mount)
        mount_pcloud
        ;;
    umount)
        unmount_pcloud
        ;;
    secret)
        mount_secrets "$2"
        ;;
    -h|--help)
        show_help
        exit 0
        ;;
    -v|--version)
        show_version
        exit 0
        ;;
    *)
        show_help
        exit 0
        ;;
esac

echo "Operation completed."
