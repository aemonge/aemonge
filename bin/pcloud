#!/bin/bash

VERSION="0.0.1"

USERNAME="aemonge"
MOUNT_POINT="/home/$USERNAME/.mounts/cloud"
SMOUNT_POINT="/home/$USERNAME/.mounts/scloud"
QUIET=false

# Define directories to sync
# shellcheck source=/home/aemonge/.pcloud-structure
source "/home/$USERNAME/.pcloud-structure"

# Array to store PIDs of background processes
PIDS=()

# Rclone config encryption hanlding
ENCRYPTION_KEY=$(openssl rand -base64 32)
TEMP_FILE="/tmp/rclone_pass_$(openssl rand -hex 8)"
export ENCRYPTION_KEY
export TEMP_FILE

encrypt_password() {
    echo "$1" | openssl enc -aes-256-cbc -pbkdf2 -iter 100000 -a -salt -pass pass:"$ENCRYPTION_KEY"
}

decrypt_password() {
    local encryption_key="$1"
    local temp_file="$2"
    printf '%s' "openssl enc -d -aes-256-cbc -pbkdf2 -iter 100000 -a -salt -pass pass:$encryption_key -in $temp_file"
}

cache_password() {
    if [ ! -f "$TEMP_FILE" ]; then
        read -s -p "Enter your rclone config password: " RCLONE_PASSWORD
        echo >&2 # Print a newline after password input
        encrypt_password "$RCLONE_PASSWORD" >"$TEMP_FILE"
    else
        echo "Using cached password from $TEMP_FILE" >&2
    fi
}

function show_help() {
    echo "pcloud - A unified pCloud management script"
    echo
    echo "This script provides various operations for managing pCloud, including"
    echo "pulling, pushing, syncing, mounting the pCloud directory, and managing secrets."
    echo
    echo "Usage: pcloud [COMMAND]"
    echo
    echo "Options:"
    echo "  -h, --help, help    Show this help message and exit"
    echo "  -q, --quiet         Disable info and verbose output, show only errors and warnings"
    echo
    echo "Commands:"
    echo "  pull         Pull data from pCloud to local directories"
    echo "  push         Push data from local directories to pCloud"
    echo "  bysync       Perform a bi-directional sync between pCloud and local directories"
    echo "  sync         Sync data between pCloud and local directories"
    echo "  mount        Mount the pCloud directory"
    echo "  umount       Unmount the pCloud directory"
    echo "  smount       Mount the spCloud directory"
    echo "  sumount      Unmount the spCloud directory"
    echo "  completions  Generate zsh completions for this script"
    echo "  -h, --help    Show this help message and exit"
    echo "  -v, --version Show version information and exit"
    echo
    echo "For more information, please refer to the script documentation."
}

function show_version() {
    echo "pcloud version $VERSION"
}

function completions() {
    local completions_file="$HOME/.zfunc/_pcloud"
    mkdir -p "$HOME/.zfunc"

    echo "#compdef pcloud" >"$completions_file"
    echo "" >>"$completions_file"
    echo "_pcloud() {" >>"$completions_file"
    echo "  local -a commands" >>"$completions_file"
    echo "  commands=(" >>"$completions_file"
    echo "    'pull:Pull data from pCloud to local directories'" >>"$completions_file"
    echo "    'push:Push data from local directories to pCloud'" >>"$completions_file"
    echo "    'bysync:Perform a bi-directional sync between pCloud and local directories'" >>"$completions_file"
    echo "    'sync:Sync data between pCloud and local directories'" >>"$completions_file"
    echo "    'mount:Mount the pCloud directory'" >>"$completions_file"
    echo "    'umount:Unmount the pCloud directory'" >>"$completions_file"
    echo "    'smount:Mount the spCloud directory'" >>"$completions_file"
    echo "    'sumount:Unmount the spCloud directory'" >>"$completions_file"
    echo "    'completions:Generate zsh completions for this script'" >>"$completions_file"
    echo "    'help:Show help message'" >>"$completions_file"
    echo "  )" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "  _arguments -C \\" >>"$completions_file"
    echo "    '(-h --help)'{-h,--help}'[Show help message]' \\" >>"$completions_file"
    echo "    '(-q --quiet)'{-q,--quiet}'[Disable info and verbose output, show only errors and warnings]' \\" >>"$completions_file"
    echo "    '(-v --version)'{-v,--version}'[Show version information]' \\" >>"$completions_file"
    echo "    '1: :->first_arg' \\" >>"$completions_file"
    echo "    '*: :->args'" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "  case \$state in" >>"$completions_file"
    echo "    first_arg)" >>"$completions_file"
    echo "      _describe -t commands 'pcloud commands' commands" >>"$completions_file"
    echo "      ;;" >>"$completions_file"
    echo "    args)" >>"$completions_file"
    echo "      case \$words[1] in" >>"$completions_file"
    echo "        pull|push|bysync|sync|mount|umount|smount|sumount|completions|help)" >>"$completions_file"
    echo "          # No further arguments for these commands" >>"$completions_file"
    echo "          ;;" >>"$completions_file"
    echo "        *)" >>"$completions_file"
    echo "          _files" >>"$completions_file"
    echo "          ;;" >>"$completions_file"
    echo "      esac" >>"$completions_file"
    echo "      ;;" >>"$completions_file"
    echo "  esac" >>"$completions_file"
    echo "}" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "_pcloud \"\$@\"" >>"$completions_file"

    echo "Completions for 'pcloud' script have been generated and stored in $completions_file"
    echo "Please add the following line to your .zshrc if it's not already there:"
    echo "  fpath=(~/.zfunc \$fpath)"
    echo "Then restart your shell or run 'source ~/.zshrc'"
}

function cleanup() {
    # Kill all background processes
    shred -u "$TEMP_FILE"
    unset ENCRYPTION_KEY
    unset TEMP_FILE

    for pid in "${PIDS[@]}"; do
        kill "$pid" 2>/dev/null
    done
    wait 2>/dev/null
}

function mount_pcloud() {
    echo "🌨 Mounting pCloud directory"

    mkdir -p $MOUNT_POINT
    rclone mount pcloud:/ $MOUNT_POINT \
        --daemon --vfs-cache-mode full \
        --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")"
    xdg-open "$MOUNT_POINT"
}

function unmount_pcloud() {
    echo "⛅ Un-mounting pCloud directory"

    # Try normal unmount first
    fusermount -u "$MOUNT_POINT" || umount "$MOUNT_POINT"

    # If normal unmount fails, try force unmount
    if mountpoint -q "$MOUNT_POINT"; then
        echo "Normal unmount failed. Attempting force unmount..."
        fusermount -uz "$MOUNT_POINT" || umount -f "$MOUNT_POINT"
    fi

    # If it's still mounted, try lazy unmount
    if mountpoint -q "$MOUNT_POINT"; then
        echo "Force unmount failed. Attempting lazy unmount..."
        umount -l "$MOUNT_POINT"
    fi

    # Check if unmount was successful
    if ! mountpoint -q "$MOUNT_POINT"; then
        rmdir "$MOUNT_POINT"
    else
        echo "Failed to unmount $MOUNT_POINT. It may still be in use."
        echo "You might need to close all applications using the mount point and try again."
    fi
}

function sync_operation() {
    local operation=$1
    local max_length=0

    # First pass to determine max length
    for REMOTE_DIR in "${!CLOUD_DIRS[@]}"; do
        LOCAL_DIR=${CLOUD_DIRS[$REMOTE_DIR]}
        if [ "$operation" = "pull" ]; then
            current_length=$((${#REMOTE_DIR} + 15)) # 13 for "Pulling: pcloud:"
        else
            current_length=$((${#LOCAL_DIR} + 11)) # 9 for "Pushing: "
        fi
        if [ $current_length -gt $max_length ]; then
            max_length=$current_length
        fi
    done

    # Add a small buffer to max_length
    max_length=$((max_length + 2))

    # Second pass to perform sync and print aligned output
    for REMOTE_DIR in "${!CLOUD_DIRS[@]}"; do
        LOCAL_DIR=${CLOUD_DIRS[$REMOTE_DIR]}
        if [ "$operation" = "pull" ]; then
            $QUIET || printf " %-*s %s\n" $max_length "pcloud:$REMOTE_DIR" "$LOCAL_DIR"
            rclone sync \
                -q --check-first "pcloud:$REMOTE_DIR" "$LOCAL_DIR" \
                --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")"
        elif [ "$operation" = "push" ]; then
            $QUIET || printf " %-*s %s\n" $max_length "$LOCAL_DIR" "pcloud:$REMOTE_DIR"
            rclone sync \
                -q --check-first "$LOCAL_DIR" "pcloud:$REMOTE_DIR" \
                --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")"
        fi
        PIDS+=($!)
    done

    wait
}

function file_sync() {
    perform_sync() {
        local user_home
        local username
        local sync_source
        local sync_target

        if [[ $EUID -eq 0 ]] && [[ -n $SUDO_USER ]]; then
            username="$SUDO_USER"
            user_home="/home/$SUDO_USER"
            sync_source="$user_home/os"
            sync_target=""
        else
            username="$(whoami)"
            user_home="$HOME"
            sync_source="$user_home/os/home/$username"
            sync_target="$user_home"
        fi
        $QUIET || echo "🔄 Syncing from $sync_source to ${sync_target:-/}"

        # Function to compare modification times
        compare_times() {
            local source="$1"
            local target="$2"
            local source_time
            local target_time

            source_time=$(stat -c %Y "$source" 2>/dev/null || echo 0)
            target_time=$(stat -c %Y "$target" 2>/dev/null || echo 0)

            if [[ $source_time -gt $target_time ]]; then
                return 0 # Source is newer
            else
                return 1 # Target is newer or same age
            fi
        }

        # Function to sync files
        sync_file() {
            local newer="$1"
            local older="$2"

            if compare_times "$newer" "$older"; then
                [[ ! -f $older ]] && mkdir -p "$(dirname "$older")"
                cp -p "$newer" "$older"
            else
                mkdir -p "$(dirname "$newer")"
                cp -p "$older" "$newer"
            fi
        }

        # Function to find and sync files
        find_and_sync() {
            local search_path="$1"
            shift
            local exclude_pattern=()
            while (($#)); do
                exclude_pattern+=("--exclude" "$1")
                shift
            done

            $QUIET || echo "  fd --type f --hidden --follow" "${exclude_pattern[@]}" . "$search_path"
            if command -v fd >/dev/null 2>&1; then
                fd --type f --hidden --follow "${exclude_pattern[@]}" . "$search_path" |
                    while read -r source_file; do
                        relative_path="${source_file#"$search_path"}"
                        target_file="$sync_target$relative_path"
                        sync_file "$source_file" "$target_file"
                    done
            else
                echo "'fd' is not installed. Please install it and try again."
                exit 1
            fi
        }

        if [[ $EUID -eq 0 ]]; then
            # When running with sudo, exclude the user's home directory and some system directories
            exclude_pattern=("$user_home" ".directory")
            find_and_sync "$sync_source" "${exclude_pattern[@]}"
        else
            find_and_sync "$sync_source"
        fi
    }

    # Call the function directly, sudo is handled within the function
    perform_sync
}

function start_crypto() {
    local password="$1"
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"startcrypto $password\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

function stop_crypto() {
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"stopcrypto\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

function unmount_secrets() {
    echo "󰦝 ⛅ Un-mounting spCloud directory"

    # Try normal unmount first
    fusermount -u "$SMOUNT_POINT" || umount "$SMOUNT_POINT"

    # If normal unmount fails, try force unmount
    if mountpoint -q "$SMOUNT_POINT"; then
        echo "Normal unmount failed. Attempting force unmount..."
        fusermount -uz "$SMOUNT_POINT" || umount -f "$SMOUNT_POINT"
    fi

    # If it's still mounted, try lazy unmount
    if mountpoint -q "$SMOUNT_POINT"; then
        echo "Force unmount failed. Attempting lazy unmount..."
        umount -l "$SMOUNT_POINT"
    fi

    # Check if unmount was successful
    if ! mountpoint -q "$SMOUNT_POINT"; then
        rmdir "$SMOUNT_POINT"
    else
        echo "Failed to unmount $SMOUNT_POINT. It may still be in use."
        echo "You might need to close all applications using the mount point and try again."
    fi
}

function mount_secrets() {
    echo "󰦝 🌨 Mounting spCloud directory"
    mkdir -p $SMOUNT_POINT

    rclone mount pcloud-secrets: $SMOUNT_POINT \
        --daemon --vfs-cache-mode full \
        --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")"

    xdg-open "$SMOUNT_POINT"

    if ! { sleep 3m && pcloud sumount; }; then
        msg="⚠️  ⚠️  Failed to unmount secrets directory after 3 minutes."
        echo "$msg" | wall
        notify-send "Unmount Timeout" "$msg" --icon=dialog-warning
    fi
}

trap cleanup INT TERM EXIT

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    -q | --quiet)
        QUIET=true
        shift
        ;;
    -h | --help)
        show_help
        exit 0
        ;;
    -v | --version)
        show_version
        exit 0
        ;;
    pull | push | sync | mount | umount | secret | smount | sumount | completions)
        if [[ -z $command ]]; then
            command="$1"
        else
            echo "Error: Multiple commands specified"
            show_help
            exit 1
        fi
        shift
        ;;
    *)
        echo "Invalid option: $1"
        show_help
        exit 1
        ;;
    esac
done

# Execute the command
case "$command" in
pull)
    cache_password
    sync_operation "pull"
    file_sync
    ;;
push)
    cache_password
    file_sync
    sync_operation "push"
    ;;
sync)
    file_sync
    ;;
mount)
    cache_password
    mount_pcloud
    ;;
umount)
    cache_password
    unmount_pcloud
    ;;
smount)
    cache_password
    mount_secrets
    ;;
sumount)
    cache_password
    unmount_secrets
    ;;
completions)
    completions
    ;;
"")
    echo "Error: No command specified"
    show_help
    exit 1
    ;;
*)
    echo "Error: Unknown command '$command'"
    show_help
    exit 1
    ;;
esac
