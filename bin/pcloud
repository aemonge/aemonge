#!/bin/bash

VERSION="0.1.0"

USERNAME="aemonge"
MOUNT_ROOT="/home/$USERNAME/.mounts"
MOUNT_POINT="$MOUNT_ROOT/cloud"
SMOUNT_POINT="$MOUNT_ROOT/scloud"
QUIET=false

set -euo pipefail

# Define directories to sync
# shellcheck source=/home/aemonge/.pcloud-structure
source "/home/$USERNAME/.pcloud-structure"

# Array to store PIDs of background processes
PIDS=()

# Rclone config encryption hanlding
ENCRYPTION_KEY=$(openssl rand -base64 32)
TEMP_FILE="/tmp/rclone_pass_$(openssl rand -hex 8)"
export ENCRYPTION_KEY
export TEMP_FILE

encrypt_password() {
    echo "$1" | openssl enc -aes-256-cbc -pbkdf2 -iter 100000 -a -salt -pass pass:"$ENCRYPTION_KEY"
}

decrypt_password() {
    local encryption_key="$1"
    local temp_file="$2"
    printf '%s' "openssl enc -d -aes-256-cbc -pbkdf2 -iter 100000 -a -salt -pass pass:$encryption_key -in $temp_file"
}

cache_password() {
    if [ ! -f "$TEMP_FILE" ]; then
        read -rs -p "Enter your rclone config password: " RCLONE_PASSWORD
        echo >&2 # Print a newline after password input
        encrypt_password "$RCLONE_PASSWORD" >"$TEMP_FILE"
    else
        echo "Using cached password from $TEMP_FILE" >&2
    fi
}

function show_help() {
    echo "pcloud - A unified pCloud management script"
    echo
    echo "This script provides various operations for managing pCloud, including"
    echo "pulling, pushing, mounting the pCloud directory, and managing secrets."
    echo
    echo "Usage: pcloud [COMMAND]"
    echo
    echo "Options:"
    echo "  -h, --help, help    Show this help message and exit"
    echo "  -q, --quiet         Disable info and verbose output, show only errors and warnings"
    echo
    echo "Commands:"
    echo "  pull         Pull data from pCloud to local directories"
    echo "  push         Push data from local directories to pCloud"
    echo "  mount        Mount the pCloud directory"
    echo "  umount       Unmount the pCloud directory"
    echo "  smount       Mount the spCloud directory"
    echo "  sumount      Unmount the spCloud directory"
    echo "  completions  Generate zsh completions for this script"
    echo "  -h, --help    Show this help message and exit"
    echo "  -v, --version Show version information and exit"
    echo
    echo "For more information, please refer to the script documentation."
}

function show_version() {
    echo "pcloud version $VERSION"
}

function completions() {
    local completions_file="$HOME/.zfunc/_pcloud"
    mkdir -p "$HOME/.zfunc"

    echo "#compdef pcloud" >"$completions_file"
    # shellcheck disable=SC2129
    echo "" >>"$completions_file"
    echo "_pcloud() {" >>"$completions_file"
    echo "  local -a commands" >>"$completions_file"
    echo "  commands=(" >>"$completions_file"
    echo "    'pull:Pull data from pCloud to local directories'" >>"$completions_file"
    echo "    'push:Push data from local directories to pCloud'" >>"$completions_file"
    echo "    'mount:Mount the pCloud directory'" >>"$completions_file"
    echo "    'umount:Unmount the pCloud directory'" >>"$completions_file"
    echo "    'smount:Mount the spCloud directory'" >>"$completions_file"
    echo "    'sumount:Unmount the spCloud directory'" >>"$completions_file"
    echo "    'completions:Generate zsh completions for this script'" >>"$completions_file"
    echo "    'help:Show help message'" >>"$completions_file"
    echo "  )" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "  _arguments -C \\" >>"$completions_file"
    echo "    '(-h --help)'{-h,--help}'[Show help message]' \\" >>"$completions_file"
    echo "    '(-q --quiet)'{-q,--quiet}'[Disable info and verbose output, show only errors and warnings]' \\" >>"$completions_file"
    echo "    '(-v --version)'{-v,--version}'[Show version information]' \\" >>"$completions_file"
    echo "    '1: :->first_arg' \\" >>"$completions_file"
    echo "    '*: :->args'" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "  case \$state in" >>"$completions_file"
    echo "    first_arg)" >>"$completions_file"
    echo "      _describe -t commands 'pcloud commands' commands" >>"$completions_file"
    echo "      ;;" >>"$completions_file"
    echo "    args)" >>"$completions_file"
    echo "      case \$words[1] in" >>"$completions_file"
    echo "        pull|push|mount|umount|smount|sumount|completions|help)" >>"$completions_file"
    echo "          # No further arguments for these commands" >>"$completions_file"
    echo "          ;;" >>"$completions_file"
    echo "        *)" >>"$completions_file"
    echo "          _files" >>"$completions_file"
    echo "          ;;" >>"$completions_file"
    echo "      esac" >>"$completions_file"
    echo "      ;;" >>"$completions_file"
    echo "  esac" >>"$completions_file"
    echo "}" >>"$completions_file"
    echo "" >>"$completions_file"
    echo "_pcloud \"\$@\"" >>"$completions_file"

    echo "Completions for 'pcloud' script have been generated and stored in $completions_file"
    echo "Please add the following line to your .zshrc if it's not already there:"
    echo "  fpath=(~/.zfunc \$fpath)"
    echo "Then restart your shell or run 'source ~/.zshrc'"
}

function cleanup() {
    # Kill all background processes
    shred -u "$TEMP_FILE"
    unset ENCRYPTION_KEY
    unset TEMP_FILE

    for pid in "${PIDS[@]}"; do
        kill "$pid" 2>/dev/null
    done
    wait 2>/dev/null
}

function mount_pcloud() {
    echo "ðŸŒ¨ Mounting pCloud directories and secrets"

    # Function to mount a single directory
    mount_directory() {
        local remote_name=$1
        local mount_point=$2

        mkdir -p "$mount_point"
        rclone mount "$remote_name" "$mount_point" \
            --daemon --vfs-cache-mode full \
            --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")"
    }

    # Mount both directories
    mount_directory "pcloud:/" "$MOUNT_POINT"
    mount_directory "pcloud-secrets:/" "$SMOUNT_POINT"

    # Open the main mount point in the default file manager
    xdg-open "$MOUNT_ROOT"
}

function unmount_pcloud() {
    echo "â›… Un-mounting pCloud directories and secrets"

    # Function to unmount a single mount point
    unmount_point() {
        local mount_point=$1

        # Try normal unmount first
        fusermount -u "$mount_point" || umount "$mount_point"

        # If normal unmount fails, try force unmount
        if mountpoint -q "$mount_point"; then
            echo "Normal unmount failed. Attempting force unmount..."
            fusermount -uz "$mount_point" || umount -f "$mount_point"
        fi

        # If it's still mounted, try lazy unmount
        if mountpoint -q "$mount_point"; then
            echo "Force unmount failed. Attempting lazy unmount..."
            umount -l "$mount_point"
        fi

        # Check if unmount was successful
        if ! mountpoint -q "$mount_point"; then
            rmdir "$mount_point"
        else
            echo "Failed to unmount $mount_point. It may still be in use."
            echo "You might need to close all applications using the mount point and try again."
        fi
    }

    # Unmount both mount points
    unmount_point "$MOUNT_POINT"
    unmount_point "$SMOUNT_POINT"
}

function start_crypto() {
    local password="$1"
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"startcrypto $password\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

function stop_crypto() {
    expect -c "
        spawn pcloudcc -k
        expect \">\"
        send \"stopcrypto\r\"
        expect \">\"
        send \"quit\r\"
        expect eof
    "
}

sync_paths_by() {
    local direction=$1
    local pids=()
    local exit_status=0

    # Function to run rclone command
    run_rclone() {
        local cmd="$1"
        local src="$2"
        local dest="$3"
        local item_type="$4"
        local item_path="$5"

        $cmd \
            --password-command="$(decrypt_password "$ENCRYPTION_KEY" "$TEMP_FILE")" \
            --transfers 32 --checkers 16 --buffer-size 64M --s3-chunk-size 128M --fast-list \
            --update --copy-links --quiet \
            "$src" "$dest"

        local status=$?
        if [ $status -ne 0 ]; then
            if [[ "$direction" == "push" && "$cmd" == *"sync"* && $status -eq 3 ]]; then
                echo "Warning: Some files were not found during push. This is normal if files were deleted locally." >&2
                return 0
            else
                echo "Error: Failed to $direction $item_type $item_path" >&2
                return $status
            fi
        fi
    }

    # Function to sync items (files or directories)
    sync_items() {
        local -n items=$1 # Use nameref to pass associative arrays
        local remote_prefix=$2
        local cmd=$3
        local item_type=$4

        for cloud_path in "${!items[@]}"; do
            local local_path="${items[$cloud_path]}"

            if [ "$direction" = "pull" ]; then
                if [ "$item_type" = "file" ]; then
                    run_rclone "$cmd" "$remote_prefix:$cloud_path" "$(dirname "$local_path")" "$item_type" "$local_path" &
                else
                    run_rclone "$cmd" "$remote_prefix:$cloud_path" "$local_path" "$item_type" "$local_path" &
                fi
            else
                if [ "$item_type" = "file" ]; then
                    run_rclone "$cmd" "$local_path" "$remote_prefix:$(dirname "$cloud_path")/" "$item_type" "$local_path " &
                else
                    run_rclone "$cmd" "$local_path" "$remote_prefix:$cloud_path" "$item_type" "$local_path" &
                fi
            fi
            pids+=($!)
        done
    }

    # Sync files
    sync_items SETTINGS_FILES "pcloud" "rclone copy" "file"
    sync_items SECRET_FILES "pcloud-secrets" "rclone copy" "file"

    # Sync directories
    sync_items SETTINGS_DIRS "pcloud" "rclone sync" "directory"
    sync_items SECRET_DIRS "pcloud-secrets" "rclone sync" "directory"

    # Wait for all background processes to complete
    for pid in "${pids[@]}"; do
        wait "$pid" || exit_status=$?
    done

    return $exit_status
}

trap cleanup INT TERM EXIT

# Parse arguments
command=""
while [[ $# -gt 0 ]]; do
    case $1 in
    -q | --quiet)
        QUIET=true
        shift
        ;;
    -h | --help)
        show_help
        exit 0
        ;;
    -v | --version)
        show_version
        exit 0
        ;;
    pull | push | mount | umount | secret | smount | sumount | completions)
        if [[ -z $command ]]; then # HERE ???
            command="$1"
        else
            echo "Error: Multiple commands specified"
            show_help
            exit 1
        fi
        shift
        ;;
    *)
        echo "Invalid option: $1"
        show_help
        exit 1
        ;;
    esac
done

# Execute the command
case "$command" in
pull)
    cache_password
    sync_paths_by "pull"
    ;;
push)
    cache_password
    sync_paths_by "push"
    ;;
mount)
    cache_password
    mount_pcloud
    ;;
umount)
    cache_password
    unmount_pcloud
    ;;
completions)
    completions
    ;;
"")
    echo "Error: No command specified"
    show_help
    exit 1
    ;;
*)
    echo "Error: Unknown command '$command'"
    show_help
    exit 1
    ;;
esac
