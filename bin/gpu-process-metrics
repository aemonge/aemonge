#!/usr/bin/env bash
# GPU Metrics Extractor with Colored Output and GUI Support
# Usage: gpu_metrics.sh [-q|--quiet] [-v|--verbose] [-h|--help] [--version] [-g|--gui]
# Run with -h or --help for detailed usage instructions.

set -euo pipefail

LOG_LEVEL=${LOG_LEVEL:-INFO}
declare -A LOG_LEVELS=([TRACE]=0 [DEBUG]=1 [INFO]=2 [WARNING]=3 [ERROR]=4 [CRITICAL]=5)
VERSION="1.0.0"
GUI_MODE=false

log() {
    local level="$1"
    local message="$2"
    local color_reset="\033[0m"
    declare -A colors=(
        [TRACE]="\033[0;36m"    # Cyan
        [DEBUG]="\033[0;34m"    # Blue
        [INFO]="\033[0;32m"     # Green
        [WARNING]="\033[0;35m"  # Magenta
        [ERROR]="\033[0;33m"    # Yellow
        [CRITICAL]="\033[0;31m" # Red
    )
    if [[ ${LOG_LEVELS[$level]} -le ${LOG_LEVELS[$LOG_LEVEL]} ]]; then
        echo -e "${colors[$level]}[$level]${color_reset} $message"
    fi
}

show_help() {
    cat <<EOF
GPU Metrics Extractor with Colored Output and GUI Support
Usage: $0 [-q|--quiet] [-v|--verbose] [-h|--help] [--version] [-g|--gui]
  -q, --quiet      Suppress all non-critical output.
  -v, --verbose    Increase verbosity (e.g., -v for INFO, -vv for DEBUG).
  -h, --help       Display this help message and exit.
  --version        Display the script version and exit.
  -g, --gui        Format output for KDE Plasma 6 widget.
EOF
    exit 0
}

parse_arguments() {
    while getopts ":qvhg-:" opt; do
        case "${opt}" in
        q) LOG_LEVEL=CRITICAL ;;
        v)
            if [[ $LOG_LEVEL == "INFO" ]]; then
                LOG_LEVEL=DEBUG
            else
                LOG_LEVEL=TRACE
            fi
            ;;
        h) show_help ;;
        g) GUI_MODE=true ;;
        -)
            case "${OPTARG}" in
            quiet) LOG_LEVEL=CRITICAL ;;
            verbose)
                if [[ $LOG_LEVEL == "INFO" ]]; then
                    LOG_LEVEL=DEBUG
                else
                    LOG_LEVEL=TRACE
                fi
                ;;
            help) show_help ;;
            version)
                echo "Version: $VERSION"
                exit 0
                ;;
            gui) GUI_MODE=true ;;
            *)
                log ERROR "Invalid option: --${OPTARG}"
                exit 1
                ;;
            esac
            ;;
        *)
            log ERROR "Invalid option: -${OPTARG}"
            exit 1
            ;;
        esac
    done
}

check_dependencies() {
    if ! command -v nvidia-smi &>/dev/null; then
        log CRITICAL "nvidia-smi is required but not installed."
        exit 1
    fi
}

extract_gpu_metrics() {
    log INFO "Extracting GPU metrics..."
    nvidia-smi --query-gpu=fan.speed,temperature.gpu,memory.used,memory.total,compute_mode \
        --format=csv,noheader,nounits | awk -F ', ' '
    {
        fan=$1
        temp=$2
        mem_used=$3
        mem_total=$4
        compute_mode=$5

        if (compute_mode == "Exclusive_Process") {
            mem_percent=(mem_used / mem_total) * 100
            if ("'"$GUI_MODE"'" == "true") {
                printf "Ôúè %s%%\nüå°Ô∏è%s¬∞C\nÔ°ö %.2f%%\n", fan, temp, mem_percent
            } else {
                # Colored output for terminal
                printf " \033[1;34mÔúè\033[0m \033[1;32m%s%%\033[0m \033[1;34müå°Ô∏è\033[0m\033[1;31m%s \033[0m\033[1;34mÔ°ö \033[0m\033[1;33m%.2f \033[0m\n", fan, temp, mem_percent
            }
        }
    }'
}

main() {
    parse_arguments "$@"
    check_dependencies
    extract_gpu_metrics
}

main "$@"
