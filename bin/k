#!/usr/bin/env bash
# Smarter 'clear' Command with Cursor Control and Command Execution
# Usage: k [-q|--quiet] [-v|--verbose] [-h|--help] [--version] \
#          [-k|--keep] [-w|--wait DURATION] [-x|--exec <command>]
# Run with -h or --help for detailed usage instructions.

set -euo pipefail

LOG_LEVEL=${LOG_LEVEL:-INFO}
declare -A LOG_LEVELS=([TRACE]=0 [DEBUG]=1 [INFO]=2 [WARNING]=3 [ERROR]=4 [CRITICAL]=5)
VERSION="1.1.2"

log() {
    local level="$1"
    local message="$2"
    local color_reset="\033[0m"
    declare -A colors=(
        [TRACE]="\033[0;36m"    # Cyan
        [DEBUG]="\033[0;34m"    # Blue
        [INFO]="\033[0;32m"     # Green
        [WARNING]="\033[0;35m"  # Magenta
        [ERROR]="\033[0;33m"    # Yellow
        [CRITICAL]="\033[0;31m" # Red
    )
    if [[ ${LOG_LEVELS[$level]} -ge ${LOG_LEVELS[$LOG_LEVEL]} ]]; then
        echo -e "${colors[$level]}[$level]${color_reset} $message"
    fi
}

show_help() {
    cat <<EOF
Smarter 'clear' Command with Cursor Control and Command Execution
Usage: $0 [-q|--quiet] [-v|--verbose] [-h|--help] [--version] \
          [-k|--keep] [-w|--wait DURATION] [-x|--exec <command>]

Options:
  -q, --quiet      Suppress all non-critical output.
  -v, --verbose    Increase verbosity (e.g., -v for INFO, -vv for DEBUG).
  -h, --help       Display this help message and exit.
  --version        Display the script version and exit.
  -k, --keep       Move cursor to top-left corner without clearing the screen.
  -w, --wait       Wait for a specified duration (e.g., 1s, 2m) before continuing.
  -x, --exec       Execute the specified command or function in a loop.

Examples:
  $0               Clear the screen.
  $0 -k            Move cursor to top-left corner without clearing the screen.
  $0 -w 2s         Wait for 2 seconds, then clear the screen.
  $0 -kw 1s -x 'f() { echo "Hello, World!"; }; f'  # Define and run a function in a loop
EOF
    exit 0
}

show_version() {
    echo "k version $VERSION"
    exit 0
}

wait_for_duration() {
    local duration="$1"
    if [[ -z "$duration" ]]; then
        log ERROR "No duration specified for -w option."
        exit 1
    fi
    log DEBUG "Waiting for $duration..."
    sleep "$duration"
}

parse_arguments() {
    while getopts ":qvhkw:x:-:" opt; do
        case "${opt}" in
        q) LOG_LEVEL=CRITICAL ;;
        v)
            if [[ $LOG_LEVEL == "INFO" ]]; then
                LOG_LEVEL=DEBUG
            else
                LOG_LEVEL=TRACE
            fi
            ;;
        h) show_help ;;
        k) keep_cursor=true ;;
        w) wait_duration="$OPTARG" ;;
        x) command_to_run="$OPTARG" ;;
        -)
            case "${OPTARG}" in
            quiet) LOG_LEVEL=CRITICAL ;;
            verbose)
                if [[ $LOG_LEVEL == "INFO" ]]; then
                    LOG_LEVEL=DEBUG
                else
                    LOG_LEVEL=TRACE
                fi
                ;;
            help) show_help ;;
            version) show_version ;;
            keep) keep_cursor=true ;;
            wait)
                wait_duration="${!OPTIND}"
                OPTIND=$((OPTIND + 1))
                ;;
            exec)
                command_to_run="${!OPTIND}"
                OPTIND=$((OPTIND + 1))
                ;;
            *)
                log ERROR "Invalid option: --${OPTARG}"
                exit 1
                ;;
            esac
            ;;
        *)
            log ERROR "Invalid option: -${OPTARG}"
            exit 1
            ;;
        esac
    done
    shift $((OPTIND - 1))
}

execute_command() {
    local command="$1"
    if [[ -n "$command" ]]; then
        log DEBUG "Executing command: '$command'"
        eval "$command"
    fi
}

main() {
    local keep_cursor=false
    local wait_duration=""
    local command_to_run=""

    parse_arguments "$@"

    if [[ -n "$command_to_run" ]]; then
        while true; do
            if [[ -n "$wait_duration" ]]; then
                wait_for_duration "$wait_duration"
            fi
            if [[ "$keep_cursor" == true ]]; then
                echo -ne "\033[H"
            else
                clear
            fi
            execute_command "$command_to_run"
        done
    else
        if [[ -n "$wait_duration" ]]; then
            wait_for_duration "$wait_duration"
        fi
        if [[ "$keep_cursor" == true ]]; then
            echo -ne "\033[H"
        else
            clear
        fi
    fi
}

main "$@"
