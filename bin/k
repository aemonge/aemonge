#!/bin/bash

# Script: k
#
# Description: A smarter 'clear' command that can clear the screen, move the cursor,
# and execute commands or functions in a loop.
#
# Usage: k [options] [-- <command or function>]
# Options:
#   -k, --keep      Move the cursor to the top-left corner without clearing the screen.
#   -w, --wait      Wait for a specified duration (e.g., 1s, 2m) before continuing.
#   -h, --help      Display this help message.
#   -v, --version   Display the version of the script.
#   -- <command>    Loop infinitely and keep running the command or function.

VERSION="1.1.0"

# Function to display help
show_help() {
    cat <<EOF
A smarter 'clear' command that can clear the screen, move the cursor, and execute commands or functions in a loop.

Usage: k [options] [-- <command or function>]

Options:
  -k, --keep      Move the cursor to the top-left corner without clearing the screen.
  -w, --wait      Wait for a specified duration (e.g., 1s, 2m) before continuing.
  -h, --help      Display this help message.
  -v, --version   Display the version of the script.
  -- <command>    Loop infinitely and keep running the command or function.

Examples:
  k               Clear the screen.
  k -k            Move the cursor to the top-left corner without clearing the screen.
  k -kw 1s        Move the cursor to the top-left corner and wait for 1 second.
  k -w 2s         Clear the screen and wait for 2 seconds.
  k -kw 1 -kw 1s -- kubectl get pods
  k -kw 1 -- 'f() { echo "Hello, World!"; }; f'  # Define and run a function in a loop

Notes:
  - When using -- <command>, you can include function definitions and calls.
  - Functions defined in the command will be properly executed in each iteration of the loop.
  - Use single quotes around complex commands or function definitions to prevent shell expansion.
EOF
}

# Function to display version
show_version() {
    echo "k version $VERSION"
}

# Function to execute a command or function
execute_command() {
    local cmd="$1"
    if [[ "$(type -t "$cmd")" == "function" ]]; then
        # If it's a function, we need to define it in the current context
        eval "$(declare -f "$cmd")"
        "$cmd"
    else
        eval "$cmd"
    fi
}

# Function to handle the -w (wait) option
wait_for_duration() {
    local duration="$1"
    if [[ -z "$duration" ]]; then
        echo "Error: No duration specified for -w option."
        exit 1
    fi
    sleep "$duration"
}

# Main logic
keep_cursor=false
wait_duration=""
loop_command=false
command_to_run=""

# Parse options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
    -k | --keep)
        keep_cursor=true
        shift
        ;;
    -w | --wait)
        if [[ -n "$2" && ! "$2" =~ ^- ]]; then
            wait_duration="$2"
            shift 2
        else
            echo "Error: No duration specified for -w option."
            exit 1
        fi
        ;;
    -kw*)
        # Handle combined short options like -kw1s
        keep_cursor=true
        if [[ "$1" =~ ^-kw(.+)$ ]]; then
            wait_duration="${BASH_REMATCH[1]}"
            shift
        else
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                wait_duration="$2"
                shift 2
            else
                echo "Error: No duration specified for -w option."
                exit 1
            fi
        fi
        ;;
    -h | --help)
        show_help
        exit 0
        ;;
    -v | --version)
        show_version
        exit 0
        ;;
    --)
        loop_command=true
        shift
        command_to_run="$*"
        break
        ;;
    *)
        echo "Error: Unknown option '$1'."
        show_help
        exit 1
        ;;
    esac
done

# Perform actions based on options
if [[ "$loop_command" == true ]]; then
    clear
    while true; do
        execute_command "$command_to_run"
        if [[ "$keep_cursor" == true ]]; then
            echo -ne "\033[H"
        else
            clear
        fi
        if [[ -n "$wait_duration" ]]; then
            wait_for_duration "$wait_duration"
        fi
    done
else
    if [[ "$keep_cursor" == true ]]; then
        echo -ne "\033[H"
    else
        clear
    fi

    if [[ -n "$wait_duration" ]]; then
        wait_for_duration "$wait_duration"
    fi
fi
