#!/bin/bash

VERSION="0.0.1"

function show_help() {
    echo "v - Versatile Neovim wrapper script with term-multiplier powers using neovim-remote"
    echo ""
    echo "  This script provides a convenient interface for various Neovim operations,"
    echo "  including changing directories, opening files in split views, clearing the"
    echo "  terminal, managing sessions, and more. It's designed to work seamlessly"
    echo "  with both Neovim and terminal environments."
    echo ""
    echo "Usage: v [SUBCOMMAND] [ARGS]"
    echo ""
    echo "  Subcommands:"
    echo "    cd              Change directory in Neovim"
    echo "    split           Open file in split view"
    echo "    clear           Clear terminal in Neovim"
    echo "    session         Start a new Neovim session"
    echo "    quickedit       Open file for quick editing (auto-closes buffer)"
    echo "    completions     Generate zsh completions for this script"
    echo "    [no subcommand] Open file in Neovim"
    echo ""
    echo "Options:"
    echo "  -h, --help      Show this help message and exit"
    echo "  -v, --version   Show version information and exit"
}

function show_version() {
    echo "v version $VERSION"
}

function generate_completions() {
    local completions_file="$HOME/.zfunc/_v"
    mkdir -p "$HOME/.zfunc"

    echo "#compdef v" > "$completions_file"
    echo "" >> "$completions_file"
    echo "_v() {" >> "$completions_file"
    echo "  local -a commands" >> "$completions_file"
    echo "  commands=(" >> "$completions_file"
    echo "    'cd'" >> "$completions_file"
    echo "    'split'" >> "$completions_file"
    echo "    'clear'" >> "$completions_file"
    echo "    'session'" >> "$completions_file"
    echo "    'quickedit'" >> "$completions_file"
    echo "    'completions'" >> "$completions_file"
    echo "  )" >> "$completions_file"
    echo "" >> "$completions_file"
    echo "  _arguments -C \\" >> "$completions_file"
    echo "    '(-h --help)'{-h,--help}'[Show help message]' \\" >> "$completions_file"
    echo "    '(-v --version)'{-v,--version}'[Show version information]' \\" >> "$completions_file"
    echo "    '1: :->first_arg' \\" >> "$completions_file"
    echo "    '*: :->args'" >> "$completions_file"
    echo "" >> "$completions_file"
    echo "  case \$state in" >> "$completions_file"
    echo "    first_arg)" >> "$completions_file"
    echo "      _alternative \\" >> "$completions_file"
    echo "        'commands:command:(\${commands[@]})' \\" >> "$completions_file"
    echo "        'files:file:_files'" >> "$completions_file"
    echo "      ;;" >> "$completions_file"
    echo "    args)" >> "$completions_file"
    echo "      case \$words[1] in" >> "$completions_file"
    echo "        cd)" >> "$completions_file"
    echo "          _directories" >> "$completions_file"
    echo "          ;;" >> "$completions_file"
    echo "        split|quickedit|session)" >> "$completions_file"
    echo "          _files" >> "$completions_file"
    echo "          ;;" >> "$completions_file"
    echo "        clear|completions)" >> "$completions_file"
    echo "          # No further arguments for these commands" >> "$completions_file"
    echo "          ;;" >> "$completions_file"
    echo "        *)" >> "$completions_file"
    echo "          _files" >> "$completions_file"
    echo "          ;;" >> "$completions_file"
    echo "      esac" >> "$completions_file"
    echo "      ;;" >> "$completions_file"
    echo "  esac" >> "$completions_file"
    echo "}" >> "$completions_file"
    echo "" >> "$completions_file"
    echo "_v \"\$@\"" >> "$completions_file"

    echo "Completions for 'v' script have been generated and stored in $completions_file"
    echo "Please add the following line to your .zshrc if it's not already there:"
    echo "  fpath=(~/.zfunc \$fpath)"
    echo "Then restart your shell or run 'source ~/.zshrc'"
}

function svim() {
    cols=$(tput cols)
    lines=$(tput lines)
    adjusted_height=$((lines * 16 ))
    adjusted_width=$((cols * 10))
    split_command="split"
    if [ "$adjusted_width" -gt "$adjusted_height" ]; then
        split_command="vsplit"
    fi

    if [[ "$OSTYPE" == "darwin"* ]]; then
        nvr -cc "$split_command $(greadlink -f "$@")"
    else
        nvr -cc "$split_command $(readlink -f "$@")"
    fi
}

function quickedit() {
    local _readlink
    local _opener

    if [[ "$OSTYPE" == "darwin"* ]]; then
        _readlink="greadlink"
    else
        _readlink="readlink"
    fi

    if type nvr > /dev/null && [ -n "$NVIM" ]; then
        # _opener=(nvr -c "setlocal bufhidden=wipe" --remote-tab-wait )
        _opener=(
            nvr
            -c "setlocal bufhidden=wipe"
            -c "autocmd WinLeave <buffer> if tabpagenr('$') > 1 | tabprev | endif"
            --remote-tab-wait
        )

    else
        _opener=(nvim)
    fi

    for file in "${@}"; do
        "${_opener[@]}" "$("$_readlink" -f "${file}")"
    done
}

function vim_func() {
    local _readlink
    local _opener

    if [[ "$OSTYPE" == "darwin"* ]]; then
        _readlink="greadlink"
    else
        _readlink="readlink"
    fi

    if [ -n "$NVIM" ]; then
        _opener=(nvr --remote-tab)
    else
        _opener=(nvim)
    fi

    for file in "${@}"; do
        "${_opener[@]}" "$("$_readlink" -f "${file}")"
    done
}

function generate_completions() {
    local completion_dir="$HOME/.zfunc"
    local completion_file="$completion_dir/_v"

    # Create the directory if it doesn't exist
    mkdir -p "$completion_dir"

    # Generate the completion function
    {
        echo "#compdef v"
        echo ""
        echo "_v() {"
        echo "  local -a commands"
        echo "  commands=("
        echo "    'cd'"
        echo "    'split'"
        echo "    'clear'"
        echo "    'session'"
        echo "    'quickedit'"
        echo "    'generate-completions'"
        echo "  )"
        echo ""
        echo "  _arguments -C \\"
        echo "    '(-h --help)'{-h,--help}'[Show help message]' \\"
        echo "    '(-v --version)'{-v,--version}'[Show version information]' \\"
        echo "    '1: :->cmds_or_files' \\"
        echo "    '*:: :->args'"
        echo ""
        echo "  case \$state in"
        echo "    cmds_or_files)"
        echo "      _alternative \\"
        echo "        'commands:v command:(\$commands)' \\"
        echo "        'files:file:_files'"
        echo "      ;;"
        echo "    args)"
        echo "      case \$words[1] in"
        echo "        cd|split|quickedit|session)"
        echo "          _files"
        echo "          ;;"
        echo "      esac"
        echo "      ;;"
        echo "  esac"
        echo "}"
        echo ""
        echo "_v"
    } > "$completion_file"

    echo "Completion function generated at $completion_file"
    echo "Add the following line to your ~/.zshrc file if it's not already there:"
    echo "fpath=(\$HOME/.zfunc \$fpath)"
    echo "Then run 'autoload -U compinit && compinit' to reload completions"
}

function session() {
    if [ -n "$NVIM" ]; then
        echo "Error: Cannot start a new Neovim session from within an existing Neovim instance."
        exit 1
    fi

    cmd=(nvim +':terminal')
    if [ $# -eq 0 ]; then
        cmd+=("+startinsert")
    else
        for file in "$@"; do
          cmd+=("+tabe $file")
        done
    fi

    "${cmd[@]}"
}

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

if ! command -v nvr >/dev/null; then
    echo "Install neovim-remote"
    exit 1
fi

case "$1" in
    cd)
        nvr -c "cd $(pwd)"
        ;;
    split)
        shift
        svim "$@"
        ;;
    clear)
        nvr -c ":TerminalClear"
        ;;
    session)
        shift
        session "$@"
        ;;
    quickedit)
        shift
        quickedit "$@"
        ;;
    completions)
        generate_completions
        ;;
    -h|--help)
        show_help
        ;;
    -v|--version)
        show_version
        ;;
    *)
        vim_func "$@"
        ;;
esac
