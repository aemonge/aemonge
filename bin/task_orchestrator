#!/bin/bash

# Function to display help
show_help() {
    cat <<EOF
Usage: $0 <main-command> --during <during-command> [options]

Options:
  --during <command>      Command to run concurrently with the main command (mandatory).
  --on-succeed <command>  Command to run if the main command succeeds (optional).
  --on-fail <command>     Command to run if the main command fails (optional).
  --delay <seconds>       Delay between retry attempts for failover commands (default: 1).
  --max-attempts <number> Maximum number of retry attempts for failover commands (default: 3).

Notes:
  - If using local functions as commands, ensure they are exported using 'export -f <function_name>'.
  - The script returns the exit code of the main command for caller feedback.

Example:
  1. Run a long command with a 'during' command:"
     $0 'sleep 2' --during 'echo "Main command is running..."'
  
  2. Simulate success with a callback:"
     $0 'sleep 2 && true' \\
         --during 'echo "Main command is running..."' \\
         --on-succeed 'echo "Success!"'
  
  3. Simulate failure with retries:"
     $0 'sleep 2 && false' \\
         --during 'echo "Main command is running..."' \\
         --on-fail 'echo "Failure!"' \\
         --delay 2 --max-attempts 5
EOF
}

# Function to parse arguments
parse_arguments() {
    # Default values for optional arguments
    DELAY=1
    MAX_ATTEMPTS=3

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --during)
            DURING_CMD="$2"
            shift 2
            ;;
        --on-succeed)
            ON_SUCCEED_CMD="$2"
            shift 2
            ;;
        --on-fail)
            ON_FAIL_CMD="$2"
            shift 2
            ;;
        --delay)
            DELAY="$2"
            shift 2
            ;;
        --max-attempts)
            MAX_ATTEMPTS="$2"
            shift 2
            ;;
        *)
            MAIN_CMD="$1"
            shift
            ;;
        esac
    done

    # Validate required arguments
    if [ -z "$MAIN_CMD" ] || [ -z "$DURING_CMD" ]; then
        echo "Error: <main_command> and --during are required." >&2
        echo ""
        show_help
    fi
}

# Function to execute a command or function
execute() {
    local cmd="$1"
    if declare -f "$cmd" >/dev/null; then
        "$cmd"
    else
        eval "$cmd"
    fi
}

# Function to retry a command with delay
retry_with_delay() {
    local cmd="$1"
    local delay="$2"
    local max_attempts="$3"
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        echo "Attempt $attempt of $max_attempts:"
        if execute "$cmd"; then
            return 0 # Success
        fi
        attempt=$((attempt + 1))
        if [ $attempt -le $max_attempts ]; then
            echo "Retrying in $delay seconds..."
            sleep "$delay"
        fi
    done

    return 1 # Failure after all attempts
}

# Main function
task_orchestrator() {
    parse_arguments "$@"

    # Run the main command in the background
    execute "$MAIN_CMD" &
    MAIN_PID=$!

    # Run the "during" command
    execute "$DURING_CMD" &
    DURING_PID=$!

    # Wait for the main command to finish
    wait $MAIN_PID
    MAIN_STATUS=$?

    # Clean up the "during" command
    kill $DURING_PID 2>/dev/null

    # Handle the main command's exit status
    if [ $MAIN_STATUS -eq 0 ]; then
        if [ -n "$ON_SUCCEED_CMD" ]; then
            execute "$ON_SUCCEED_CMD"
        fi
    else
        if [ -n "$ON_FAIL_CMD" ]; then
            echo "Main command failed. Attempting failover command..."
            retry_with_delay "$ON_FAIL_CMD" "$DELAY" "$MAX_ATTEMPTS"
        fi
    fi

    exit $MAIN_STATUS
}

# Call the main function with all arguments
task_orchestrator "$@"
