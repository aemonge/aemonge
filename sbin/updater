#!/bin/zsh

set -e

title() {
    if command -v "boxify" &>/dev/null; then
        boxify title "$@"
    else
        echo "$@"
    fi
}

subtitle() {
    if command -v "boxify" &>/dev/null; then
        boxify subtitle "$@"
    else
        echo "$@"
    fi
}

show_help() {
    echo "Usage: $0 [OPTION]"
    echo "Run system updates for various package managers."
    echo
    echo "Options:"
    echo "  -h, --help, help    Show this help message and exit"
    echo "  -q, --quiet         Disable info and verbose output, show only errors and warnings"
    echo "  pacman              Update using pacman"
    echo "  aura                Update using aura"
    echo "  snap                Update using snap"
    echo "  hardware            Update hardware firmware"
    echo "  clam                Update ClamAV database"
    echo "  cargo               Update cargo packages"
    echo "  go                  Update go packages"
    echo "  npm                 Update npm packages"
    echo "  zinit               Update zinit plugins"
    echo "  neovim              Update Neovim plugins"
    echo "  pcloud              Pull pcloud updates"
    echo "  bins                Update linked bins and sbins"
    echo "  completions         Generate Zsh completions and save to ~/.zfunc"
    echo "  and-shutdown        Run all updates and then shutdown the system"
}

QUIET=false

check_command() {
    if ! command -v "$1" &>/dev/null; then
        subtitle "Warning: $1 not found. Skipping $2." >&2
        return 1
    fi
    return 0
}

update_pacman() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "pacman" "pacman update"; then
            $QUIET || title "Running 'pacman -Syu'"
            if [ $# -eq 0 ]; then
                pacman -Syu --noconfirm
            else
                pacman -Syu
            fi
        fi
    fi
}

update_aura() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "aura" "aura update"; then
            $QUIET || title "Running 'aura -Ayu'"
            if [ $# -eq 0 ]; then
                aura -Ayu --noconfirm
            else
                aura -Ayu
            fi
        fi
    fi
}

update_snap() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "snap" "snap update" && check_command "systemctl" "systemd operations"; then
            $QUIET || title "Running 'snap refresh'"
            systemctl start snapd.apparmor.service snapd.service
            snap refresh
            systemctl stop snapd.apparmor.service snapd.service snapd.socket
        else
            $QUIET || subtitle "No 'systemctl status snapd.apparmor.service snapd.service'"
        fi
    fi
}

update_hardware() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "fwupdmgr" "firmware update"; then
            $QUIET || title "Running 'fwupdmgr refresh,get-updates,update'"
            fwupdmgr refresh || true
            fwupdmgr get-updates || true
            fwupdmgr update
        fi
    fi
}

update_clam() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "freshclam" "ClamAV update"; then
            $QUIET || title "Running 'freshclam'"
            freshclam
        fi
    fi
}

update_cargo() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "cargo" "cargo packages update"; then
            $QUIET || title "Running: 'cargo install-update -a'"
            if ! cargo install-update -a; then
                subtitle "Warning: cargo install-update failed. Attempting to install cargo-update..." >&2
                cargo install cargo-update
                cargo install-update -a
            fi
        fi
    fi
}

update_go() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "go" "go packages update"; then
            $QUIET || title "Running: 'go-global-update'"
            if ! go-global-update; then
                subtitle "Warning: go install-update failed." >&2
            fi
        fi
    fi
}

update_npm() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "npm" "npm packages update"; then
            $QUIET || title "Running: 'npm update -g'"
            npm update -g
        fi
    fi
}

update_zinit() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "zsh" "zinit update"; then
            $QUIET || title "Running: 'zsh -ic \"zinit self-update\",\"update -a\"'"
            zsh -ic "zinit self-update"
            zsh -ic "zinit update -a"
        fi
    fi
}

link_bins() {
    local user_home
    local target_bin
    local target_sbin

    $QUIET || title "Running: 'ln -s ~/usr/[bin|sbin] [~/.local|/usr/local]/[bin|sbin]'"

    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]] && [[ -n "$SUDO_USER" ]]; then
        user_home="/home/$SUDO_USER"
        target_bin="/usr/local/bin"
        target_sbin="/usr/local/sbin"
    else
        user_home="$HOME"
        target_bin="$HOME/.local/bin"
        target_sbin="$HOME/.local/sbin"
    fi

    # Remove broken links in target directories
    find "$target_bin" -xtype l -delete
    find "$target_sbin" -xtype l -delete

    # Link binaries
    ln -sf "$user_home/usr/bin/"* "$target_bin/"
    ln -sf "$user_home/usr/sbin/"* "$target_sbin/"
}

pull_pcloud() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "pcloud" "PCloud pulling updates"; then
            $QUIET || title "Running: 'pcloud pull'"
            $QUIET && pcloud pull -q || pcloud pull
        fi
    fi
}

update_neovim() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "nvim" "Neovim plugins update"; then
            $QUIET || title "Running: 'nvim Lazy update; CocUpdateSync; TSUpdateSync'"
            nvim --headless -c 'lua require("lazy").update():wait()' -c 'qa!'
            nvim --headless -c 'CocUpdateSync|qa!'
            nvim --headless -c 'TSUpdateSync' -c 'qa!'
        fi
    fi
}

shutdown_system() {
    if check_command "shutdown" "system shutdown"; then
        $QUIET || title "All updates completed. Shutting down the system..."
        shutdown now
    fi
}

run_all_updates() {
    if $QUIET; then
        update_pacman >/dev/null
        update_aura >/dev/null
        update_snap >/dev/null
        update_hardware >/dev/null
        update_clam >/dev/null
        update_cargo >/dev/null
        update_go >/dev/null
        update_npm >/dev/null
        update_zinit >/dev/null
        update_neovim >/dev/null
        pull_pcloud >/dev/null
        link_bins >/dev/null
    else
        update_pacman
        update_aura
        update_snap
        update_hardware
        update_clam
        update_cargo
        update_go
        update_npm
        update_zinit
        update_neovim
        pull_pcloud
        link_bins
    fi
}

completions() {
    mkdir -p ~/.zfunc
    echo "#compdef updater" >~/.zfunc/_updater
    echo "" >>~/.zfunc/_updater
    echo "_updater() {" >>~/.zfunc/_updater
    echo "  local -a commands" >>~/.zfunc/_updater
    echo "  commands=(" >>~/.zfunc/_updater
    echo "    'pacman:Update using pacman'" >>~/.zfunc/_updater
    echo "    'aura:Update using aura'" >>~/.zfunc/_updater
    echo "    'snap:Update using snap'" >>~/.zfunc/_updater
    echo "    'hardware:Update hardware firmware'" >>~/.zfunc/_updater
    echo "    'clam:Update ClamAV database'" >>~/.zfunc/_updater
    echo "    'cargo:Update cargo packages'" >>~/.zfunc/_updater
    echo "    'go:Update go packages'" >>~/.zfunc/_updater
    echo "    'npm:Update npm packages'" >>~/.zfunc/_updater
    echo "    'zinit:Update zinit plugins'" >>~/.zfunc/_updater
    echo "    'neovim:Update Neovim plugins'" >>~/.zfunc/_updater
    echo "    'neovim:Update Neovim plugins'" >>~/.zfunc/_updater
    echo "    'pcloud:Pull pcloud updates'" >>~/.zfunc/_updater
    echo "    'bins:Update linked bins and sbins'" >>~/.zfunc/_updater
    echo "    'completions:Generate Zsh completions'" >>~/.zfunc/_updater
    echo "    'and-shutdown:Run all updates and then shutdown'" >>~/.zfunc/_updater
    echo "  )" >>~/.zfunc/_updater
    echo "  _describe -t commands 'updater commands' commands" >>~/.zfunc/_updater
    echo "}" >>~/.zfunc/_updater
    echo "" >>~/.zfunc/_updater
    echo "_updater \"\$@\"" >>~/.zfunc/_updater
    echo "Zsh completions have been saved to ~/.zfunc/_updater."
    echo "Please ensure ~/.zfunc is in your fpath and restart your shell or run 'autoload -U compinit && compinit' to enable them."
}

main() {
    local shutdown_after=false
    while [[ $# -gt 0 ]]; do
        case $1 in
        -q | --quiet)
            QUIET=true
            shift
            ;;
        -h | --help | help)
            show_help
            exit 0
            ;;
        and-shutdown)
            shutdown_after=true
            shift
            ;;
        *)
            break
            ;;
        esac
    done
    if [ $shutdown_after = true ]; then
        if $QUIET; then
            run_all_updates >/dev/null
        else
            run_all_updates
        fi
        shutdown_system
    elif [ $# -eq 0 ]; then
        if $QUIET; then
            run_all_updates >/dev/null
        else
            run_all_updates
        fi
    else
        for arg in "$@"; do
            case $arg in
            pacman)
                if $QUIET; then
                    update_pacman 1 >/dev/null
                else
                    update_pacman 1
                fi
                ;;
            aura)
                if $QUIET; then
                    update_aura 1 >/dev/null
                else
                    update_aura 1
                fi
                ;;
            snap)
                if $QUIET; then
                    update_snap >/dev/null
                else
                    update_snap
                fi
                ;;
            hardware)
                if $QUIET; then
                    update_hardware >/dev/null
                else
                    update_hardware
                fi
                ;;
            clam)
                if $QUIET; then
                    update_clam >/dev/null
                else
                    update_clam
                fi
                ;;
            cargo)
                if $QUIET; then
                    update_cargo >/dev/null
                else
                    update_cargo
                fi
                ;;
            go)
                if $QUIET; then
                    update_go >/dev/null
                else
                    update_go
                fi
                ;;
            npm)
                if $QUIET; then
                    update_npm >/dev/null
                else
                    update_npm
                fi
                ;;
            zinit)
                if $QUIET; then
                    update_zinit >/dev/null
                else
                    update_zinit
                fi
                ;;
            bins)
                if $QUIET; then
                    link_bins >/dev/null
                else
                    link_bins
                fi
                ;;
            pcloud)
                if $QUIET; then
                    pull_pcloud >/dev/null
                else
                    pull_pcloud
                fi
                ;;
            neovim)
                if $QUIET; then
                    update_neovim >/dev/null
                else
                    update_neovim
                fi
                ;;
            completions)
                completions
                exit 0
                ;;
            *)
                echo "Unknown update: $arg"
                show_help
                exit 1
                ;;
            esac
        done
    fi
}

main "$@"
