#!/bin/zsh
# vim: ft=bash

set -e

title() {
    if command -v "boxify" &>/dev/null; then
        boxify title "$@"
    else
        echo "$@"
    fi
}

subtitle() {
    if command -v "boxify" &>/dev/null; then
        boxify subtitle "$@"
    else
        echo "$@"
    fi
}

show_help() {
    echo "Usage: $0 [OPTION]"
    echo "Run system updates for various package managers."
    echo
    echo "Options:"
    echo "  -h, --help, help    Show this help message and exit"
    echo "  -q, --quiet         Disable info and verbose output, show only errors and warnings"
    echo "  pamac               Update using Manajaro 'pamac'"
    echo "  snap                Update using snap"
    echo "  hardware            Update hardware firmware"
    echo "  clam                Update ClamAV database"
    echo "  cargo               Update cargo packages"
    echo "  go                  Update go packages"
    echo "  gem                 Update ruby packages"
    echo "  pnpm                Update pnpm packages"
    echo "  pip                 Update pipx packages"
    echo "  zinit               Update zinit plugins"
    echo "  clean-dev           Clean (nvim, zinit, treesitter, mason) dev packages"
    echo "  neovim              Update Neovim plugins"
    echo "  bins                Update linked bins and sbins"
    echo "  completions         Generate Zsh completions and save to ~/.zfunc"
    echo "  and-shutdown        Run all updates and then shutdown the system"
}

QUIET=false

check_command() {
    if ! command -v "$1" &>/dev/null; then
        subtitle "Warning: $1 not found. Skipping $2." >&2
        return 1
    fi
    return 0
}

update_pamac() {
    # Check if NOT running as root (sudo), and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "pamac" "pamac update"; then
            $QUIET || title "Running 'pamac update --no-confirm --aur || true'"
            pamac update --no-confirm --aur || true
        fi
    fi
}

update_snap() {
    if [[ $EUID -eq 0 ]]; then
        if check_command "snap" "snap update" && check_command "systemctl" "systemd operations"; then
            $QUIET || title "Running 'pamac upgrade --enable-snap --no-confirm'"
            systemctl start snapd.apparmor.service snapd.service
            pamac update --enable-snap --no-confirm
            systemctl stop snapd.apparmor.service snapd.service snapd.socket
        else
            $QUIET || subtitle "No 'systemctl status snapd.apparmor.service snapd.service'"
            $QUIET || subtitle "pamac install snapd libpamac-snap-plugin"
        fi
    fi
}

update_hardware() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "fwupdmgr" "firmware update"; then
            $QUIET || title "Running 'fwupdmgr refresh,get-updates,update'"
            fwupdmgr refresh || true
            fwupdmgr get-updates || true
            fwupdmgr update
        fi
    fi
}

update_clam() {
    # Check if running as root (sudo), and if so proceed
    if [[ $EUID -eq 0 ]]; then
        if check_command "freshclam" "ClamAV update"; then
            $QUIET || title "Running 'freshclam'"
            freshclam
        fi
    fi
}

update_cargo() {
    # Check if running as user, and if so proceed
    # go install github.com/Gelio/go-global-update@latest
    if [[ $EUID -ne 0 ]]; then
        if check_command "cargo" "cargo packages update"; then
            $QUIET || title "Running: 'rustup update && cargo install-update -a'"
            rustup update || true
            if ! cargo install-update -a; then
                subtitle "Warning: cargo install-update failed. Installing cargo-update..." >&2
                cargo install cargo-update
                cargo install-update -a
            fi
        fi
    fi
}

update_go() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "go" "go packages update"; then
            $QUIET || title "Running: 'go-global-update'"
            if ! go-global-update; then
                subtitle "Warning: go install-update failed." >&2
            fi
        fi
    fi
}

update_gem() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "gem" "gem update"; then
            $QUIET || title "Running: 'gem update'"
            if ! gem update; then
                subtitle "Warning: gem update failed." >&2
            fi
        fi
    fi
}

update_pip() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "uv" "uv tool updates"; then
            $QUIET || title "Running: 'uv tool upgrade --all'"
            uv self update || true
            uv tool upgrade --all || true
        fi
    fi
}

update_pnpm() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "pnpm" "pnpm packages update"; then
            $QUIET || title "Running: 'pnpm update -g'"
            pnpm update -g || true
        fi
    fi
}

update_zinit() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "zsh" "zinit update"; then
            $QUIET || title "Running: 'zsh -ic \"zinit self-update\",\"update -a\"'"
            if $QUIET; then
                zsh -f -ic "setopt no_monitor; source ~/.zinit && \
                zinit self-update --quiet  >/dev/null 2>&1 && \
                zinit update --all --parallel --quiet >/dev/null 2>&1 && \
                wait" >/dev/null 2>&1
            else
                zsh -f -ic "source ~/.zinit && \
                zinit self-update && \
                zinit update --all --parallel && \
                wait"
            fi
        fi
    fi
}

clean_dev() {
    if [[ $EUID -eq 0 ]]; then
        $QUIET || title "Cleaning system packages and logs"
        pamac clean --no-confirm
        pamac remove --orphans --no-confirm
        pamac clean --no-confirm --build-files
        journalctl --vacuum-time=2weeks
        find /var/log -type f -name '*.log' -delete
    else
        $QUIET || title "Removing cache and state data from development tools"
        local dirs_to_remove=(
            ~/.cache
            ~/.config/coc
            ~/.local/share/{coc,nvim,nvim-treesitter,zinit}
            ~/.vim/{bundle,plugged}
            ~/.zinit
        )
        rm -rf "${dirs_to_remove[@]}"

        local commands=(
            "pnpm:pnpm cache clean --force"
            "go:GO111MODULE=off go clean -cache -modcache -i -r"
        )

        for cmd in "${commands[@]}"; do
            IFS=: read -r tool command <<<"$cmd"
            if check_command "$tool" "$command"; then
                $QUIET || echo "Cleaning $tool cache"
                eval "$command"
            fi
        done
    fi
}

link_bins() {
    $QUIET || title "Linking binaries from ~/usr/[bin|sbin] to [~/.local|/usr/local]/[bin|sbin]"

    local user_home target_bin target_sbin
    if [[ $EUID -eq 0 && -n "$SUDO_USER" ]]; then
        user_home="/home/$SUDO_USER"
        target_bin="/usr/local/bin"
        target_sbin="/usr/local/sbin"
    else
        user_home="$HOME"
        target_bin="$HOME/.local/bin"
        target_sbin="$HOME/.local/sbin"
    fi

    local dirs=("$target_bin" "$target_sbin")
    for dir in "${dirs[@]}"; do
        [[ -d "$dir" ]] || mkdir -p "$dir"
        find "$dir" -xtype l -delete
    done

    local src_dirs=("$user_home/usr/bin" "$user_home/usr/sbin")
    local dest_dirs=("$target_bin" "$target_sbin")
    for i in {0..1}; do
        if [[ -d "${src_dirs[$i]}" ]]; then
            find "${src_dirs[$i]}" -type f -executable -print0 |
                xargs -0 -I {} ln -sf {} "${dest_dirs[$i]}/"
        fi
    done
}

update_neovim() {
    # Check if running as user, and if so proceed
    if [[ $EUID -ne 0 ]]; then
        if check_command "nvim" "Neovim plugins update"; then
            $QUIET || title "Running: 'nvim Lazy update; TSUpdateSync' with 'timetout 20s'"
            if $QUIET; then
                nvim --headless -c 'lua require("lazy").update():wait()' -c 'qa!'
                nvim --headless -c 'Lazy load nvim-treesitter | TSUpdateSync | qa!'
            else
                nvim --headless -c 'lua require("lazy").update():wait()' -c 'qa!'
                nvim --headless -c 'Lazy load nvim-treesitter | TSUpdateSync | qa!'
            fi
        fi
    fi
}

shutdown_system() {
    if check_command "shutdown" "system shutdown"; then
        $QUIET || title "All updates completed. Shutting down the system..."
        shutdown now
    fi
}

run_all_updates() {
    if $QUIET; then
        # $QUIET || title "Updating System (pamac, snap, hardware, clam)"
        update_hardware >/dev/null
        update_clam >/dev/null
        update_snap >/dev/null
        update_pamac >/dev/null

        # $QUIET || title "Updating Libraries (cargo, go, gem, pnpm, pip)"
        update_cargo >/dev/null
        update_go >/dev/null
        update_gem >/dev/null
        update_pnpm >/dev/null
        update_pip >/dev/null

        # $QUIET || title "Updating terminal (zsh, nvim)"
        update_zinit >/dev/null
        update_neovim >/dev/null

        # $QUIET || title "Re-linking local (s)binaries"
        link_bins >/dev/null
    else
        $QUIET || title "Updating System (pamac, snap, hardware, clam)"
        update_hardware >/dev/null
        update_clam >/dev/null
        update_snap >/dev/null
        update_pamac >/dev/null

        $QUIET || title "Updating Libraries (cargo, go, gem, pnpm, pip)"
        update_cargo >/dev/null
        update_go >/dev/null
        update_gem >/dev/null
        update_pnpm >/dev/null
        update_pip >/dev/null

        $QUIET || title "Updating terminal (zsh, nvim)"
        update_zinit >/dev/null
        update_neovim >/dev/null

        $QUIET || title "Re-linking local (s)binaries"
        link_bins >/dev/null
    fi
}

completions() {
    mkdir -p ~/.zfunc
    echo "#compdef updater" >~/.zfunc/_updater
    echo "" >>~/.zfunc/_updater
    echo "_updater() {" >>~/.zfunc/_updater
    echo "  local -a commands" >>~/.zfunc/_updater
    echo "  commands=(" >>~/.zfunc/_updater
    echo "    'pamac:Update using pamac'" >>~/.zfunc/_updater
    echo "    'snap:Update using snap'" >>~/.zfunc/_updater
    echo "    'hardware:Update hardware firmware'" >>~/.zfunc/_updater
    echo "    'clam:Update ClamAV database'" >>~/.zfunc/_updater
    echo "    'cargo:Update cargo packages'" >>~/.zfunc/_updater
    echo "    'go:Update go packages'" >>~/.zfunc/_updater
    echo "    'pnpm:Update pnpm packages'" >>~/.zfunc/_updater
    echo "    'pip:Update pipx packages'" >>~/.zfunc/_updater
    echo "    'zinit:Update zinit plugins'" >>~/.zfunc/_updater
    echo "    'clean-dev:Clean dev packages'" >>~/.zfunc/_updater
    echo "    'neovim:Update Neovim plugins'" >>~/.zfunc/_updater
    echo "    'neovim:Update Neovim plugins'" >>~/.zfunc/_updater
    echo "    'bins:Update linked bins and sbins'" >>~/.zfunc/_updater
    echo "    'completions:Generate Zsh completions'" >>~/.zfunc/_updater
    echo "    'and-shutdown:Run all updates and then shutdown'" >>~/.zfunc/_updater
    echo "  )" >>~/.zfunc/_updater
    echo "  _describe -t commands 'updater commands' commands" >>~/.zfunc/_updater
    echo "}" >>~/.zfunc/_updater
    echo "" >>~/.zfunc/_updater
    echo "_updater \"\$@\"" >>~/.zfunc/_updater
    echo "Zsh completions have been saved to ~/.zfunc/_updater."
    echo "Please ensure ~/.zfunc is in your fpath and restart your shell or run 'autoload -U compinit && compinit' to enable them."
}

main() {
    local shutdown_after=false
    while [[ $# -gt 0 ]]; do
        case $1 in
        -q | --quiet)
            QUIET=true
            shift
            ;;
        -h | --help | help)
            show_help
            exit 0
            ;;
        and-shutdown)
            shutdown_after=true
            shift
            ;;
        *)
            break
            ;;
        esac
    done
    if [ $shutdown_after = true ]; then
        if $QUIET; then
            run_all_updates >/dev/null
        else
            run_all_updates
        fi
        shutdown_system
    elif [ $# -eq 0 ]; then
        if $QUIET; then
            run_all_updates >/dev/null
        else
            run_all_updates
        fi
    else
        for arg in "$@"; do
            case $arg in
            pamac)
                if $QUIET; then
                    update_pamac 1 >/dev/null
                else
                    update_pamac 1
                fi
                ;;
            aura)
                if $QUIET; then
                    update_aura 1 >/dev/null
                else
                    update_aura 1
                fi
                ;;
            snap)
                if $QUIET; then
                    update_snap >/dev/null
                else
                    update_snap
                fi
                ;;
            hardware)
                if $QUIET; then
                    update_hardware >/dev/null
                else
                    update_hardware
                fi
                ;;
            clam)
                if $QUIET; then
                    update_clam >/dev/null
                else
                    update_clam
                fi
                ;;
            cargo)
                if $QUIET; then
                    update_cargo >/dev/null
                else
                    update_cargo
                fi
                ;;
            go)
                if $QUIET; then
                    update_go >/dev/null
                else
                    update_go
                fi
                ;;
            gem)
                if $QUIET; then
                    update_gem >/dev/null
                else
                    update_gem
                fi
                ;;
            pip)
                if $QUIET; then
                    update_pip >/dev/null
                else
                    update_pip
                fi
                ;;
            pnpm)
                if $QUIET; then
                    update_pnpm >/dev/null
                else
                    update_pnpm
                fi
                ;;
            zinit)
                if $QUIET; then
                    update_zinit >/dev/null
                else
                    update_zinit
                fi
                ;;
            clean-dev)
                if $QUIET; then
                    clean_dev >/dev/null
                else
                    clean_dev
                fi
                ;;
            bins)
                if $QUIET; then
                    link_bins >/dev/null
                else
                    link_bins
                fi
                ;;
            neovim)
                if $QUIET; then
                    update_neovim >/dev/null
                else
                    update_neovim
                fi
                ;;
            completions)
                completions
                exit 0
                ;;
            *)
                echo "Unknown update: $arg"
                show_help
                exit 1
                ;;
            esac
        done
    fi
}

main "$@"
