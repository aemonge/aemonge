#!/bin/zsh

set -e

show_help() {
    echo "Usage: $0 [OPTION]"
    echo "Run system updates for various package managers."
    echo
    echo "Options:"
    echo "  -h, --help, help    Show this help message and exit"
    echo "  -q, --quiet         Disable info and verbose output, show only errors and warnings"
    echo "  pacman              Update using pacman"
    echo "  aura                Update using aura"
    echo "  snap                Update using snap"
    echo "  hardware            Update hardware firmware"
    echo "  clam                Update ClamAV database"
    echo "  cargo               Update cargo packages"
    echo "  npm                 Update npm packages"
    echo "  zinit               Update zinit plugins"
    echo "  neovim              Update Neovim plugins"
    echo "  completions         Generate Zsh completions and save to ~/.zfunc"
    echo "  and-shutdown        Run all updates and then shutdown the system"
}

QUIET=false

update_pacman() {
    $QUIET || echo "Running 'pacman -Syu'"
    if [ $# -eq 0 ]; then
        sudo pacman -Syu --noconfirm ${QUIET:+> /dev/null}
    else
        sudo pacman -Syu ${QUIET:+> /dev/null}
    fi
}

update_aura() {
    $QUIET || echo "Running 'aura -Ayu''"
    if [ $# -eq 0 ]; then
        sudo aura -Ayu --noconfirm ${QUIET:+> /dev/null}
    else
        sudo aura -Ayu ${QUIET:+> /dev/null}
    fi
}

update_snap() {
    if command -v "snap" &> /dev/null; then
        $QUIET || echo "Running 'snap refresh'"
        sudo systemctl start snapd.apparmor.service snapd.service ${QUIET:+> /dev/null}
        sudo snap refresh ${QUIET:+> /dev/null}
        sudo systemctl stop snapd.apparmor.service snapd.service snapd.socket ${QUIET:+> /dev/null}
    else
        $QUIET || echo "No 'systemctl status snapd.apparmor.service snapd.service'"
    fi
}

update_hardware() {
    $QUIET || echo "Running 'fwupdmgr refresh,get-updates,update'"
    sudo fwupdmgr refresh ${QUIET:+> /dev/null} || true
    sudo fwupdmgr get-updates ${QUIET:+> /dev/null} || true
    sudo fwupdmgr update ${QUIET:+> /dev/null}
}

update_clam() {
    $QUIET || echo "Running 'freshclam'"
    sudo freshclam ${QUIET:+> /dev/null}
}

update_cargo() {
    # If cargo install-update fails, but cargo does exist then `cargo install cargo-update`
    $QUIET || echo "Running: 'cargo install-update -a'"
    cargo install-update -a ${QUIET:+> /dev/null}
}

update_npm() {
    $QUIET || echo "Running: 'nvm exec system npm update -g || npm update -g'"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    nvm exec system npm update -g ${QUIET:+> /dev/null} || sudo npm update -g ${QUIET:+> /dev/null}
}

update_zinit() {
    $QUIET || echo "Running: 'zsh -ic \"zinit self-update\",\"update\"'"
    zsh -ic "zinit self-update" ${QUIET:+> /dev/null}
    zsh -ic "zinit update" ${QUIET:+> /dev/null}
}

update_neovim() {
    $QUIET || echo "Running: 'nvim --headless +'Lazy update' +'Lazy load coc.nvim | CocUpdateSync' +'TSUpdateSync'"
    LOGFILE="/tmp/neovim_update.log"
    nvim --headless +'Lazy update' +qall ${QUIET:+> /dev/null} 2>&1
    nvim --headless +'Lazy load coc.nvim | CocUpdateSync' +qall ${QUIET:+> /dev/null} 2>&1
    nvim --headless +'TSUpdateSync' +qall ${QUIET:+> /dev/null} 2>&1
    $QUIET || cat "$LOGFILE"
    rm "$LOGFILE"
}


shutdown_system() {
    $QUIET || echo "All updates completed. Shutting down the system..."
    sudo shutdown now
}

run_all_updates() {
    update_pacman 0
    update_aura 0
    update_snap
    update_hardware
    update_clam
    update_cargo
    update_npm
    update_zinit
    update_neovim
}

generate_completions() {
    local completion_script=$(cat <<'EOF'
#compdef updater

_arguments \
  '(-h --help help)'{-h,--help,help}'[Show help message]' \
  '(-q --quiet)'{-q,--quiet}'[Disable all output except errors and warnings]' \
  'pacman[Update using pacman]' \
  'aura[Update using aura]' \
  'snap[Update using snap]' \
  'hardware[Update hardware firmware]' \
  'clam[Update ClamAV database]' \
  'cargo[Update cargo packages]' \
  'npm[Update npm packages]' \
  'zinit[Update zinit plugins]' \
  'neovim[Update Neovim plugins]' \
  'completions[Generate Zsh completions and save to ~/.zfunc]' \
  'and-shutdown[Run all updates and then shutdown the system]'
EOF
    )

    mkdir -p ~/.zfunc
    echo "$completion_script" > ~/.zfunc/_update_pau_fwu_znn
    echo "Zsh completions have been saved to ~/.zfunc/_update_pau_fwu_znn. Please ensure ~/.zfunc is in your fpath and restart your shell or run 'autoload -U compinit && compinit' to enable them."
}

main() {
    local shutdown_after=false

    while [[ $# -gt 0 ]]; do
        case $1 in
            -q|--quiet)
                QUIET=true
                shift
                ;;
            -h|--help|help)
                show_help
                exit 0
                ;;
            and-shutdown)
                shutdown_after=true
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $shutdown_after = true ]; then
        run_all_updates
        shutdown_system
    elif [ $# -eq 0 ]; then
        run_all_updates
    else
        for arg in "$@"; do
            case $arg in
                pacman) update_pacman 1 ;;
                aura) update_aura 1 ;;
                snap) update_snap ;;
                hardware) update_hardware ;;
                clam) update_clam ;;
                cargo) update_cargo ;;
                npm) update_npm ;;
                zinit) update_zinit ;;
                neovim) update_neovim ;;
                completions) generate_completions; exit 0 ;;
                *) echo "Unknown update: $arg"; show_help; exit 1 ;;
            esac
        done
    fi
}

main "$@"
